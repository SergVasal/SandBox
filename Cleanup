namespace Cleanup
    {
        internal class SetTargetSystem
        {
            private const double TargetChangeTime = 1;

            private double _previousTargetSetTime;
            private bool _isTargetSet;
            private dynamic _lockedCandidateTarget;
            private dynamic _lockedTarget;
            private dynamic _target;
            private dynamic _previousTarget;
            private dynamic _activeTarget;
            private dynamic _targetInRangeContainer;

            public void Execute(Frame frame)
            {
                try
                {
                    TryUpdateTarget();
                }
                finally
                {
                    if (_isTargetSet)
                    {
                        if (_previousTarget != _target)
                        {
                            _previousTargetSetTime = Time.time;
                        }
                    }
                    else
                    {
                        _target = null;
                    }

                    TargetableEntity.Selected = _target;
                }
            }

            private void TryUpdateTarget()
            {
                _isTargetSet = false;

                TryResetLockedTargets();
                TrySetActiveTargetFromQuantum(frame);

                _previousTarget = _target;

                if (ShouldUpdateTarget())
                {
                    UpdateTarget();
                }
                else
                {
                    _isTargetSet = true;
                }
            }

            private void TryResetLockedTargets()
            {
                if (_lockedCandidateTarget && !_lockedCandidateTarget.CanBeTarget)
                {
                    _lockedCandidateTarget = null;
                }

                if (_lockedTarget && !_lockedTarget.CanBeTarget)
                {
                    _lockedTarget = null;
                }
            }

            private bool ShouldUpdateTarget()
            {
                return !_target || !_target.CanBeTarget || TargetChangeTime < Time.time - _previousTargetSetTime;
            }

            private void UpdateTarget()
            {
                if (_lockedTarget && _lockedTarget.CanBeTarget)
                {
                    _target = _lockedTarget;
                    _isTargetSet = true;
                }
                else if (_activeTarget && _activeTarget.CanBeTarget)
                {
                    _target = _activeTarget;
                    _isTargetSet = true;
                }
                else
                {
                    _target = _targetInRangeContainer.GetTarget();

                    if (_target)
                    {
                        _isTargetSet = true;
                    }
                }
            }


            // MORE CLASS CODE
        }
    }
